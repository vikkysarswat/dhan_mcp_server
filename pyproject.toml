[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "dhan-mcp-server"
version = "0.1.0"
description = "Model Context Protocol server for Dhan trading platform"
authors = [
    {name = "Dhan MCP Team", email = "team@example.com"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = [
    "trading",
    "api",
    "dhan",
    "mcp",
    "model-context-protocol",
    "algorithmic-trading",
    "financial-data",
    "market-data"
]

dependencies = [
    "mcp>=0.4.0",
    "httpx>=0.25.0",
    "pydantic>=2.0.0",
    "asyncio-throttle>=1.0.0",
    "pandas"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "bandit[toml]>=1.7.0",
    "safety>=2.3.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/dhan-mcp-server"
Documentation = "https://github.com/yourusername/dhan-mcp-server#readme"
Repository = "https://github.com/yourusername/dhan-mcp-server.git"
"Bug Reports" = "https://github.com/yourusername/dhan-mcp-server/issues"

[project.scripts]
dhan-mcp-server = "dhan_mcp_server.server:main"

[tool.hatch.build.targets.wheel]
packages = ["dhan_mcp_server"]

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312", "py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "mcp.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=dhan_mcp_server",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["dhan_mcp_server"]
omit = [
    "tests/*",
    "setup.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]